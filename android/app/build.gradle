import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("bundle"))
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    Matcher matcher = pattern.matcher(tskReqStr)
    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return ""
    }
}

flutter {
    source '../..'
    target "lib/main/main_" + getCurrentFlavor() + ".dart"
}

android {
    namespace "com.mahfuznow.hello_flutter"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/app/kotlin'
    }

    defaultConfig {
        applicationId "com.mahfuznow.hello_flutter"

        println("==================ANDROID Gradle Info ======================")
        println("Current flavor: " + getCurrentFlavor())
        println("Min SDK version: " + flutter.minSdkVersion)
        println("Target SDK version: " + flutter.targetSdkVersion)
        println("App Version code: " + flutterVersionCode)
        println("App Version name: " + flutterVersionName)
        println("==================ANDROID Gradle Info ======================")

        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions += "env"

    productFlavors {
        flavor_dev {
            dimension "env"
            applicationId "com.mahfuznow.hello_flutter_dev"
            resValue "string", "app_name", "Hello Flutter Dev"
        }
        flavor_test {
            dimension "env"
            applicationId "com.mahfuznow.hello_flutter_test"
            resValue "string", "app_name", "Hello Flutter Test"
        }
        flavor_staging {
            dimension "env"
            applicationId "com.mahfuznow.hello_flutter_staging"
            resValue "string", "app_name", "Hello Flutter Staging"
        }
        flavor_prod {
            dimension "env"
            applicationId "com.mahfuznow.hello_flutter"
            resValue "string", "app_name", "Hello Flutter"
        }
    }
}

dependencies {}
